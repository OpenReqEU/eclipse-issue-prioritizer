# coding: utf-8

from __future__ import absolute_import
from typing import List  # noqa: F401
from application.models.base_model_ import Model
from application.util import util


class LikeRequirementRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=0, agent_id: str=None, assignee: str=None, components: List[str]=None,
                 products: List[str]=None, keywords: List[str]=None):  # noqa: E501
        """LikeRequirementRequest - a model defined in Swagger

        :param assignee: The email address of the assignee.  # noqa: E501
        :type assignee: str
        :param components: The components to be filtered.  # noqa: E501
        :type components: List[str]
        :param products: The products to be filtered.  # noqa: E501
        :type products: List[str]
        :param keywords: The keywords to be filtered.  # noqa: E501
        :type keywords: List[str]
        """
        self.swagger_types = {
            'id': int,
            'agent_id': str,
            'assignee': str,
            'components': list,
            'products': list,
            'keywords': list
        }

        self.attribute_map = {
            'id': 'id',
            'agent_id': 'agent_id',
            'assignee': 'assignee',
            'components': 'components',
            'products': 'products',
            'keywords': 'keywords'
        }

        self._id = id
        self._agent_id = agent_id
        self._assignee = assignee
        self._components = components
        self._products = products
        self._keywords = keywords

    @classmethod
    def from_dict(cls, dikt) -> 'LikeRequirementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Requirement of this Requirement.  # noqa: E501
        :rtype: Requirement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the ID of the issue.


        :return: The ID of the issue.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, ID: int):
        """Sets the ID of the issue.


        :param ID: The ID of the issue.
        :type ID: int
        """

        self._id = ID

    @property
    def agent_id(self) -> str:
        """Gets the agent ID.


        :return: The agent ID.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id: int):
        """Sets the agent ID.


        :param ID: The agent ID.
        :type ID: int
        """

        self._agent_id = agent_id

    @property
    def assignee(self) -> str:
        """Gets the email address of the assignee.


        :return: The email address of the assignee.
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee: str):
        """Sets the email address of the assignee.


        :param assignee: The assignee.
        :type assignee: str
        """

        self._assignee = assignee

    @property
    def components(self) -> List[str]:
        """Gets the components.


        :return: The components.
        :rtype: List[str]
        """
        return self._components

    @components.setter
    def components(self, components: []):
        """Sets the components.


        :param components: The components list attribute.
        :type components: List[str]
        """

        self._components = components

    @property
    def products(self) -> List[str]:
        """Gets the products.


        :return: The products.
        :rtype: List[str]
        """
        return self._products

    @products.setter
    def products(self, products: []):
        """Sets the products.


        :param products: The products list attribute.
        :type products: List[str]
        """

        self._products = products

    @property
    def keywords(self) -> List[str]:
        """Gets the keywords.


        :return: The keywords.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords: []):
        """Sets the keywords.


        :param keywords: The keywords list attribute.
        :type keywords: List[str]
        """

        self._keywords = keywords
